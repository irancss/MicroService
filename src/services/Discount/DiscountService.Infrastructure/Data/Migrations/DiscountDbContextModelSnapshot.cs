// <auto-generated />
using System;
using DiscountService.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DiscountService.Infrastructure.Data.Migrations
{
    [DbContext(typeof(DiscountDbContext))]
    partial class DiscountDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DiscountService.Domain.Entities.Discount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Applicability")
                        .HasColumnType("integer");

                    b.Property<string>("ApplicableCategoryIds")
                        .HasColumnType("text");

                    b.Property<string>("ApplicableProductIds")
                        .HasColumnType("text");

                    b.Property<int?>("BuyQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("CouponCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("CurrentTotalUsage")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("GetQuantity")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAutomatic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCombinableWithOthers")
                        .HasColumnType("boolean");

                    b.Property<int?>("MaxTotalUsage")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxUsagePerUser")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MaximumDiscountAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("MinimumCartAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Value")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CouponCode")
                        .IsUnique()
                        .HasFilter("\"CouponCode\" IS NOT NULL");

                    b.HasIndex("EndDate");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsAutomatic");

                    b.HasIndex("StartDate");

                    b.HasIndex("UserId")
                        .HasFilter("\"UserId\" IS NOT NULL");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("DiscountService.Domain.Entities.DiscountUsageHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("CartTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("CouponCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("DiscountAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid>("DiscountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("FinalTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("UsedAt");

                    b.HasIndex("UserId");

                    b.ToTable("DiscountUsageHistories");
                });

            modelBuilder.Entity("DiscountService.Domain.Entities.DiscountUsageHistory", b =>
                {
                    b.HasOne("DiscountService.Domain.Entities.Discount", "Discount")
                        .WithMany("UsageHistory")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Discount");
                });

            modelBuilder.Entity("DiscountService.Domain.Entities.Discount", b =>
                {
                    b.Navigation("UsageHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
