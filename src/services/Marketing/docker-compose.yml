version: '3.8'

services:
  # Marketing Service
  marketing-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: marketing-service
    ports:
      - "5000:8080"
      - "5001:8081"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=MarketingDB;Username=postgres;Password=password123
      - ConnectionStrings__RabbitMQ=amqp://rabbitmq:5672
    depends_on:
      - postgres
      - rabbitmq
      - redis
    networks:
      - marketing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: marketing-postgres
    environment:
      POSTGRES_DB: MarketingDB
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - marketing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: marketing-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: password123
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - marketing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 30s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: marketing-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - marketing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Hangfire Dashboard (if needed separately)
  hangfire-dashboard:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: marketing-hangfire
    ports:
      - "8080:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=MarketingDB;Username=postgres;Password=password123
      - HANGFIRE_DASHBOARD_ONLY=true
    depends_on:
      - postgres
    networks:
      - marketing-network
    restart: unless-stopped
    profiles: ["hangfire"]

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:7
    container_name: marketing-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@marketing.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8090:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - marketing-network
    restart: unless-stopped
    profiles: ["tools"]

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: marketing-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - marketing-network
    restart: unless-stopped
    profiles: ["monitoring"]

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: marketing-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - marketing-network
    restart: unless-stopped
    profiles: ["monitoring"]

volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  marketing-network:
    driver: bridge
    name: marketing-network
