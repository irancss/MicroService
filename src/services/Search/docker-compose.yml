version: '3.8'

services:
  # Elasticsearch cluster
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.1
    container_name: search-elasticsearch
    environment:
      - discovery.type=single-node
      - cluster.name=search-cluster
      - node.name=search-node-1
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.security.enabled=false
      - xpack.monitoring.collection.enabled=false
      - action.destructive_requires_name=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./elasticsearch-mapping.json:/usr/share/elasticsearch/config/mapping.json
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - search-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Kibana for Elasticsearch management (optional)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.1
    container_name: search-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=kibana
      - SERVER_HOST=0.0.0.0
    ports:
      - "5601:5601"
    networks:
      - search-network
    depends_on:
      elasticsearch:
        condition: service_healthy

  # RabbitMQ message broker
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: search-rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin123
      - RABBITMQ_DEFAULT_VHOST=/
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - search-network
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Search API Service (3 instances for load balancing)
  search-api-1:
    build:
      context: .
      dockerfile: SearchService.API/Dockerfile
    container_name: search-api-1
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__Elasticsearch=http://elasticsearch:9200
      - ConnectionStrings__RabbitMQ=amqp://admin:admin123@rabbitmq:5672/
      - UserPersonalizationService__BaseUrl=http://user-personalization-service:8081
      - Serilog__WriteTo__0__Args__outputTemplate=[{Timestamp:yyyy-MM-dd HH:mm:ss}] [{Level:u3}] [{SourceContext}] {Message:lj}{NewLine}{Exception}
    ports:
      - "8081:8080"
    networks:
      - search-network
    depends_on:
      elasticsearch:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  search-api-2:
    build:
      context: .
      dockerfile: SearchService.API/Dockerfile
    container_name: search-api-2
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__Elasticsearch=http://elasticsearch:9200
      - ConnectionStrings__RabbitMQ=amqp://admin:admin123@rabbitmq:5672/
      - UserPersonalizationService__BaseUrl=http://user-personalization-service:8081
    ports:
      - "8082:8080"
    networks:
      - search-network
    depends_on:
      elasticsearch:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  search-api-3:
    build:
      context: .
      dockerfile: SearchService.API/Dockerfile
    container_name: search-api-3
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__Elasticsearch=http://elasticsearch:9200
      - ConnectionStrings__RabbitMQ=amqp://admin:admin123@rabbitmq:5672/
      - UserPersonalizationService__BaseUrl=http://user-personalization-service:8081
    ports:
      - "8083:8080"
    networks:
      - search-network
    depends_on:
      elasticsearch:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # NGINX Load Balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: search-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - nginx_cache:/var/cache/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - search-network
    depends_on:
      - search-api-1
      - search-api-2
      - search-api-3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Mock User Personalization Service (for demonstration)
  user-personalization-service:
    image: mockserver/mockserver:5.15.0
    container_name: user-personalization-service
    environment:
      - MOCKSERVER_PROPERTY_FILE=/config/mockserver.properties
      - MOCKSERVER_INITIALIZATION_JSON_PATH=/config/initialization.json
    volumes:
      - ./mock-personalization-service:/config
    ports:
      - "1080:1080"
    networks:
      - search-network
    restart: unless-stopped

  # Redis for caching (optional)
  redis:
    image: redis:7.2-alpine
    container_name: search-redis
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - search-network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: search-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - search-network
    restart: unless-stopped

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:10.2.0
    container_name: search-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - search-network
    depends_on:
      - prometheus
    restart: unless-stopped

networks:
  search-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  elasticsearch_data:
    driver: local
  rabbitmq_data:
    driver: local
  redis_data:
    driver: local
  nginx_cache:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
