// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ShippingService.Infrastructure.Data;

#nullable disable

namespace ShippingService.Infrastructure.Migrations
{
    [DbContext(typeof(ShippingDbContext))]
    partial class ShippingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("shipping")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ShippingService.Domain.Entities.FreeShippingCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("ConditionType")
                        .HasColumnType("integer")
                        .HasColumnName("condition_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("field_name");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("is_required");

                    b.Property<int>("Operator")
                        .HasColumnType("integer")
                        .HasColumnName("operator");

                    b.Property<Guid>("RuleId")
                        .HasColumnType("uuid")
                        .HasColumnName("rule_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("value");

                    b.Property<int>("ValueType")
                        .HasColumnType("integer")
                        .HasColumnName("value_type");

                    b.HasKey("Id");

                    b.HasIndex("ConditionType")
                        .HasDatabaseName("ix_free_shipping_conditions_condition_type");

                    b.HasIndex("FieldName")
                        .HasDatabaseName("ix_free_shipping_conditions_field_name");

                    b.HasIndex("RuleId")
                        .HasDatabaseName("ix_free_shipping_conditions_rule_id");

                    b.ToTable("free_shipping_conditions", "shipping");
                });

            modelBuilder.Entity("ShippingService.Domain.Entities.FreeShippingRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("CurrentUsageCount")
                        .HasColumnType("integer")
                        .HasColumnName("current_usage_count");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<int>("DiscountType")
                        .HasColumnType("integer")
                        .HasColumnName("discount_type");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("discount_value");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsPremiumOnly")
                        .HasColumnType("boolean")
                        .HasColumnName("is_premium_only");

                    b.Property<decimal?>("MaxDiscountAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("max_discount_amount");

                    b.Property<int?>("MaxUsageCount")
                        .HasColumnType("integer")
                        .HasColumnName("max_usage_count");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EndDate")
                        .HasDatabaseName("ix_free_shipping_rules_end_date");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_free_shipping_rules_is_active");

                    b.HasIndex("Priority")
                        .HasDatabaseName("ix_free_shipping_rules_priority");

                    b.HasIndex("StartDate")
                        .HasDatabaseName("ix_free_shipping_rules_start_date");

                    b.HasIndex("IsActive", "Priority")
                        .HasDatabaseName("ix_free_shipping_rules_active_priority");

                    b.ToTable("free_shipping_rules", "shipping");
                });

            modelBuilder.Entity("ShippingService.Domain.Entities.PremiumSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<int>("DurationInDays")
                        .HasColumnType("integer")
                        .HasColumnName("duration_in_days");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("LastResetDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_reset_date");

                    b.Property<int>("MaxFreeRequestsPerMonth")
                        .HasColumnType("integer")
                        .HasColumnName("max_free_requests_per_month");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<int>("RemainingFreeRequests")
                        .HasColumnType("integer")
                        .HasColumnName("remaining_free_requests");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("EndDate")
                        .HasDatabaseName("ix_premium_subscriptions_end_date");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_premium_subscriptions_user_id");

                    b.HasIndex("UserId", "IsActive")
                        .HasDatabaseName("ix_premium_subscriptions_user_active");

                    b.ToTable("premium_subscriptions", "shipping");
                });

            modelBuilder.Entity("ShippingService.Domain.Entities.ReturnTracking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<Guid>("ReturnId")
                        .HasColumnType("uuid")
                        .HasColumnName("return_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedByUserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by_user_id");

                    b.HasKey("Id");

                    b.HasIndex("ReturnId");

                    b.HasIndex("ReturnId", "Timestamp");

                    b.ToTable("return_trackings", "shipping");
                });

            modelBuilder.Entity("ShippingService.Domain.Entities.Shipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ActualDeliveryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("actual_delivery_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("customer_id");

                    b.Property<decimal>("DeclaredValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("declared_value");

                    b.Property<string>("DeliveryDriverId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("delivery_driver_id");

                    b.Property<string>("DeliveryDriverName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("delivery_driver_name");

                    b.Property<string>("DeliveryDriverPhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("delivery_driver_phone");

                    b.Property<string>("DeliveryNotes")
                        .HasColumnType("text")
                        .HasColumnName("delivery_notes");

                    b.Property<string>("DestinationAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("destination_address");

                    b.Property<string>("DestinationCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("destination_city");

                    b.Property<double>("DestinationLatitude")
                        .HasColumnType("double precision")
                        .HasColumnName("destination_latitude");

                    b.Property<double>("DestinationLongitude")
                        .HasColumnType("double precision")
                        .HasColumnName("destination_longitude");

                    b.Property<DateTime>("EstimatedDeliveryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("estimated_delivery_date");

                    b.Property<decimal>("EstimatedDistance")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("estimated_distance");

                    b.Property<TimeSpan>("EstimatedDuration")
                        .HasColumnType("interval")
                        .HasColumnName("estimated_duration");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("height");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("length");

                    b.Property<string>("OptimizedRoute")
                        .HasColumnType("text")
                        .HasColumnName("optimized_route");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("order_id");

                    b.Property<string>("OriginAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("origin_address");

                    b.Property<string>("OriginCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("origin_city");

                    b.Property<double>("OriginLatitude")
                        .HasColumnType("double precision")
                        .HasColumnName("origin_latitude");

                    b.Property<double>("OriginLongitude")
                        .HasColumnType("double precision")
                        .HasColumnName("origin_longitude");

                    b.Property<Guid>("ShippingMethodId")
                        .HasColumnType("uuid")
                        .HasColumnName("shipping_method_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_cost");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tracking_number");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("weight");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("width");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliveryDriverId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ShippingMethodId");

                    b.HasIndex("Status");

                    b.HasIndex("TrackingNumber")
                        .IsUnique();

                    b.HasIndex("Status", "EstimatedDeliveryDate");

                    b.ToTable("shipments", "shipping");
                });

            modelBuilder.Entity("ShippingService.Domain.Entities.ShipmentReturn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ApprovedByUserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("approved_by_user_id");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("approved_date");

                    b.Property<string>("CollectionAddress")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("collection_address");

                    b.Property<DateTime?>("CollectionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("collection_date");

                    b.Property<string>("CollectionNotes")
                        .HasColumnType("text")
                        .HasColumnName("collection_notes");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsRefundProcessed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_refund_processed");

                    b.Property<Guid>("OriginalShipmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("original_shipment_id");

                    b.Property<int>("Reason")
                        .HasColumnType("integer")
                        .HasColumnName("reason");

                    b.Property<string>("ReasonDescription")
                        .HasColumnType("text")
                        .HasColumnName("reason_description");

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("refund_amount");

                    b.Property<DateTime?>("RefundProcessedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refund_processed_date");

                    b.Property<string>("RefundTransactionId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("refund_transaction_id");

                    b.Property<DateTime>("RequestedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("requested_date");

                    b.Property<string>("ReturnTrackingNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("return_tracking_number");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OriginalShipmentId");

                    b.HasIndex("ReturnTrackingNumber")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.HasIndex("Status", "RequestedDate");

                    b.ToTable("shipment_returns", "shipping");
                });

            modelBuilder.Entity("ShippingService.Domain.Entities.ShipmentTracking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("location");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<Guid>("ShipmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("shipment_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedByUserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by_user_id");

                    b.HasKey("Id");

                    b.HasIndex("ShipmentId");

                    b.HasIndex("ShipmentId", "Timestamp");

                    b.ToTable("shipment_trackings", "shipping");
                });

            modelBuilder.Entity("ShippingService.Domain.Entities.ShippingMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("BaseCost")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("base_cost");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<decimal>("MaxWeight")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<bool>("RequiresTimeSlot")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_time_slot");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.ToTable("shipping_methods", "shipping");
                });

            modelBuilder.Entity("ShippingService.Domain.Entities.SubscriptionUsageLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<decimal>("SavedAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("saved_amount");

                    b.Property<Guid>("ShipmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("shipment_id");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscription_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("UsageDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("usage_date");

                    b.HasKey("Id");

                    b.HasIndex("ShipmentId")
                        .HasDatabaseName("ix_subscription_usage_logs_shipment_id");

                    b.HasIndex("SubscriptionId")
                        .HasDatabaseName("ix_subscription_usage_logs_subscription_id");

                    b.HasIndex("UsageDate")
                        .HasDatabaseName("ix_subscription_usage_logs_usage_date");

                    b.ToTable("subscription_usage_logs", "shipping");
                });

            modelBuilder.Entity("ShippingService.Domain.Entities.TimeSlotBooking", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("customer_id");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("OrderId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("order_id");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("start_time");

                    b.Property<Guid>("TimeSlotTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("time_slot_template_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("IsActive");

                    b.HasIndex("OrderId");

                    b.HasIndex("TimeSlotTemplateId", "Date");

                    b.ToTable("time_slot_bookings", "shipping");
                });

            modelBuilder.Entity("ShippingService.Domain.Entities.TimeSlotTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer")
                        .HasColumnName("day_of_week");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<Guid>("ShippingMethodId")
                        .HasColumnType("uuid")
                        .HasColumnName("shipping_method_id");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("start_time");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("ShippingMethodId", "DayOfWeek");

                    b.ToTable("time_slot_templates", "shipping");
                });

            modelBuilder.Entity("ShippingService.Domain.Entities.FreeShippingCondition", b =>
                {
                    b.HasOne("ShippingService.Domain.Entities.FreeShippingRule", "Rule")
                        .WithMany("Conditions")
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rule");
                });

            modelBuilder.Entity("ShippingService.Domain.Entities.ReturnTracking", b =>
                {
                    b.HasOne("ShippingService.Domain.Entities.ShipmentReturn", null)
                        .WithMany("TrackingHistory")
                        .HasForeignKey("ReturnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShippingService.Domain.Entities.Shipment", b =>
                {
                    b.HasOne("ShippingService.Domain.Entities.ShippingMethod", "ShippingMethod")
                        .WithMany()
                        .HasForeignKey("ShippingMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ShippingMethod");
                });

            modelBuilder.Entity("ShippingService.Domain.Entities.ShipmentReturn", b =>
                {
                    b.HasOne("ShippingService.Domain.Entities.Shipment", "OriginalShipment")
                        .WithMany()
                        .HasForeignKey("OriginalShipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OriginalShipment");
                });

            modelBuilder.Entity("ShippingService.Domain.Entities.ShipmentTracking", b =>
                {
                    b.HasOne("ShippingService.Domain.Entities.Shipment", null)
                        .WithMany("TrackingHistory")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShippingService.Domain.Entities.ShippingMethod", b =>
                {
                    b.OwnsMany("ShippingService.Domain.ValueObjects.CostRule", "CostRules", b1 =>
                        {
                            b1.Property<Guid>("ShippingMethodId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("boolean");

                            b1.Property<bool>("IsPercentage")
                                .HasColumnType("boolean");

                            b1.Property<int>("RuleType")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ShippingMethodId", "Id");

                            b1.ToTable("shipping_methods", "shipping");

                            b1.ToJson("cost_rules");

                            b1.WithOwner()
                                .HasForeignKey("ShippingMethodId");
                        });

                    b.OwnsMany("ShippingService.Domain.ValueObjects.RestrictionRule", "RestrictionRules", b1 =>
                        {
                            b1.Property<Guid>("ShippingMethodId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("boolean");

                            b1.Property<int>("RuleType")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ShippingMethodId", "Id");

                            b1.ToTable("shipping_methods", "shipping");

                            b1.ToJson("restriction_rules");

                            b1.WithOwner()
                                .HasForeignKey("ShippingMethodId");
                        });

                    b.Navigation("CostRules");

                    b.Navigation("RestrictionRules");
                });

            modelBuilder.Entity("ShippingService.Domain.Entities.SubscriptionUsageLog", b =>
                {
                    b.HasOne("ShippingService.Domain.Entities.PremiumSubscription", "Subscription")
                        .WithMany("UsageLogs")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("ShippingService.Domain.Entities.TimeSlotBooking", b =>
                {
                    b.HasOne("ShippingService.Domain.Entities.TimeSlotTemplate", "TimeSlotTemplate")
                        .WithMany("Bookings")
                        .HasForeignKey("TimeSlotTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TimeSlotTemplate");
                });

            modelBuilder.Entity("ShippingService.Domain.Entities.TimeSlotTemplate", b =>
                {
                    b.HasOne("ShippingService.Domain.Entities.ShippingMethod", "ShippingMethod")
                        .WithMany("TimeSlotTemplates")
                        .HasForeignKey("ShippingMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShippingMethod");
                });

            modelBuilder.Entity("ShippingService.Domain.Entities.FreeShippingRule", b =>
                {
                    b.Navigation("Conditions");
                });

            modelBuilder.Entity("ShippingService.Domain.Entities.PremiumSubscription", b =>
                {
                    b.Navigation("UsageLogs");
                });

            modelBuilder.Entity("ShippingService.Domain.Entities.Shipment", b =>
                {
                    b.Navigation("TrackingHistory");
                });

            modelBuilder.Entity("ShippingService.Domain.Entities.ShipmentReturn", b =>
                {
                    b.Navigation("TrackingHistory");
                });

            modelBuilder.Entity("ShippingService.Domain.Entities.ShippingMethod", b =>
                {
                    b.Navigation("TimeSlotTemplates");
                });

            modelBuilder.Entity("ShippingService.Domain.Entities.TimeSlotTemplate", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
