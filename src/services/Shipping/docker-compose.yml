# Docker Compose for Shipping Service
# Complete development and production environment setup
# Usage: docker-compose up -d

version: '3.8'

services:
  # =================
  # Database Services
  # =================
  
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: shipping-postgres
    environment:
      POSTGRES_DB: ShippingServiceDb
      POSTGRES_USER: shipping_user
      POSTGRES_PASSWORD: shipping_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - shipping-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U shipping_user -d ShippingServiceDb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: shipping-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - shipping-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===================
  # Application Services
  # ===================
  
  # Shipping Service API
  shipping-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: shipping-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=ShippingServiceDb;Username=shipping_user;Password=shipping_password
      - ConnectionStrings__Redis=redis:6379,password=redis_password
      - Twilio__AccountSid=${TWILIO_ACCOUNT_SID}
      - Twilio__AuthToken=${TWILIO_AUTH_TOKEN}
      - Twilio__PhoneNumber=${TWILIO_PHONE_NUMBER}
      - GoogleMaps__ApiKey=${GOOGLE_MAPS_API_KEY}
      - Cors__AllowedOrigins=http://localhost:3000,http://localhost:4200
      - Logging__LogLevel__Default=Information
      - Logging__LogLevel__Microsoft.AspNetCore=Warning
    ports:
      - "8080:80"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - shipping-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./logs:/app/logs

  # ===================
  # Monitoring Services
  # ===================
  
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: shipping-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - shipping-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: shipping-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - shipping-network
    restart: unless-stopped

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: shipping-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - shipping-network
    restart: unless-stopped

  # =================
  # Utility Services
  # =================
  
  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: shipping-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - shipping-api
    networks:
      - shipping-network
    restart: unless-stopped

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: shipping-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@shipping.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - shipping-network
    restart: unless-stopped

# =============
# Volume Definitions
# =============
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# =============
# Network Definitions
# =============
networks:
  shipping-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
